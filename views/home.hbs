<!-- <nav class="navbar navbar-light bg-light">
  <a class="navbar-brand" href="/">muse</a>
</nav> -->
<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="styles.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
</head>
  <body>
    <div class="container-fluid">
      <div class="strategies">
        <h1>{{user}}'s Reflection History</h1>
        <h2>Learning Strategy Breakdown</h2>
        <div class="tab">
          <button class="tablinks" onclick="openChart(event, 'category_div')">By Category</button>
          <button class="tablinks" onclick="openChart(event, 'strategy_div')">By Strategy</button>
        </div>

        <div id="category_div" class="tabcontent active-tab">
          <canvas id="myChart"></canvas>
        </div>

        <div id="strategy_div" class="tabcontent">
          <div class="strategy_tab">
            <button class="strat_tablinks" onclick="openStrategy(event, 'planningDiv')">Planning</button>
            <button class="strat_tablinks" onclick="openStrategy(event, 'docDiv')">Documenting</button>
            <button class="strat_tablinks" onclick="openStrategy(event, 'commDiv')">Communication</button>
            <button class="strat_tablinks" onclick="openStrategy(event, 'helpDiv')">Help Seeking</button>
            <button class="strat_tablinks" onclick="openStrategy(event, 'growthDiv')">Grit &amp; Growth</button>
          </div>

          <div id="planningDiv" class="strategy_tabcontent active-strategy">
            <canvas id="planningChart"></canvas>
          </div>

          <div id="docDiv" class="strategy_tabcontent">
            <canvas id="docChart"></canvas>
          </div>

          <div id="commDiv" class="strategy_tabcontent">
            <canvas id="commChart"></canvas>
          </div>

          <div id="helpDiv" class="strategy_tabcontent">
            <canvas id="helpChart"></canvas>
          </div>

          <div id="growthDiv" class="strategy_tabcontent">
            <canvas id="growthChart"></canvas>
          </div>

        </div>

      </div>
      <div class="history">
        <h2>Past Reflections</h2>
        <!-- TODO: Make reflections searchable -->
        {{#each data}}
        <div class="card">
          <div class="card-header">
            <h3>{{time}}</h3>
          </div>
          <div class="card-body">
            <h3>Round: {{round}}</h3>
            {{#if blocker}}
              <p><b><i>1. What blocker are you currently struggling with? What did you go over during SIG to overcome this blocker?</i></b></p>
              <p class="response">{{blocker}}</p>
            {{/if}}
            {{#if story}}
              <p><b><i>2. Choose the item that corresponds best to the sprint story you are currently working on.</i></b></p>
              <p class="response">{{story}}</p>
            {{/if}}
            {{#if story_reason}}
              <p><b><i>3. How will the story that you are currently working on help you overcome this blocker? How do you intend to make progress on this story during this current work session?</i></b></p>
              <p class="response">{{story_reason}}</p>
            {{/if}}
            {{#if strategy_category}}
              <p><b><i>4. Select the learning strategy category that will help you overcome your blocker for this sprint. Recall what you went over with your mentors during SIG to choose.</i></b></p>
              <p class="response">{{strategy_category}}</p>
            {{/if}}
            {{#if strategy}}
              <p><b><i>5. Out of the strategies below, which would you like to work towards improving?</i></b></p>
              <p class="response">{{strategy}}</p>
            {{/if}}
            {{#if strategy_reason}}
              <p><b><i>6. How will working on this strategy help you accomplish your goals?</i></b></p>
              <p class="response">{{strategy_reason}}</p>
            {{/if}}
            {{#if recap}}
              <p><b><i>7. Are you satisfied with your current progress, or do you feel the need to adjust your direction? Explain why, and if you need to make changes, detail what those changes would be.</i></b></p>
              <p class="response">{{recap}}</p>
            {{/if}}
            {{#if strategy_application}}
              <p><b><i>1. How have you made progress towards applying the strategy you mentioned previoiusly, and how has that strategy helped you move closer to your goals?</i></b></p>
              <p class="response">{{strategy_application}}</p>
            {{/if}}
            {{#if progress}}
              <p><b><i>2. How do you feel about your progress during this work session? Did you feel the need to make any changes to your process? Why or why not?</i></b></p>
              <p>{{progress}}</p>
            {{/if}}
            {{#if improvement}}
              <p><b><i>3. What have you been doing well, and what could be improved?</i></b></p>
              <p class="response">{{improvement}}</p>
            {{/if}}
            {{#if takeaways}}
              <p><b><i>4. Describe your main takeaways from this work session. How did Muse affect the ways you work?</i></b></p>
              <p class="response">{{takeaways}}</p>
            {{/if}}
          </div>
        </div>
        {{/each}}
      </div>
    </div>

  </body>


<script>
  String.prototype.replaceAll = function(str1, str2, ignore)
  {
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g,"\\$&"),(ignore?"gi":"g")),(typeof(str2)=="string")?str2.replace(/\$/g,"$$$$"):str2);
  }

  function openChart(evt, chart) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
      tabcontent[i].className = tabcontent[i].className.replace(" active-tab", "");
    }

    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active","");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById(chart).style.display = "block";
    document.getElementById(chart).className += " active-tab";
    evt.currentTarget.className += " active";
  }

  function openStrategy(evt, strategy) {
    var i, strategy_tabcontent, strat_tablinks;

    strategy_tabcontent = document.getElementsByClassName("strategy_tabcontent");
    for (i = 0; i < strategy_tabcontent.length; i++) {
      strategy_tabcontent[i].style.display = "none";
      strategy_tabcontent[i].className = strategy_tabcontent[i].className.replace(" active-strategy","")
    }

    strat_tablinks = document.getElementsByClassName("strat_tablinks");
    for (i = 0; i < strat_tablinks.length; i++) {
      strat_tablinks[i].className = strat_tablinks[i].className.replace(" active","");
    }

    document.getElementById(strategy).style.display = "block";
    document.getElementById(strategy).className += " active-strategy";
    evt.currentTarget.className += " active";
  }

  var ctx = document.getElementById('myChart').getContext('2d');
  var strategy_category_counts = "{{strategy_category_counts}}";
  var scc = JSON.parse(strategy_category_counts.replaceAll('&quot;','"'));
  var category_labels = Object.keys(scc);
  var category_values = Object.values(scc);

  var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'bar',
      // The data for our dataset
      data: {
          labels: category_labels,
          datasets: [{
              label: 'Strategy Category Breakdown',
              backgroundColor: ["#FC6584", "#FD9F48", "#FFCC61", "#52C0BF", "#3BA4E8"],
              data: category_values
          }]
      },
      // Configuration options go here
      options: {
        responsive: true,
        scales: {
          yAxes: [{
              ticks: {
                  beginAtZero: true
              }
          }]
        }
      }
  });

  var strategy_counts = "{{strategy_counts}}";
  var sc = JSON.parse(strategy_counts.replaceAll('&quot;','"'));
  var strategies = Object.values(sc); // list of dictionaries of strategies and counts

  var plan_keys = Object.keys(strategies[0]);
  var plan_vals = Object.values(strategies[0]);
  var plan_ctx = document.getElementById('planningChart').getContext('2d');
  var plan_chart = new Chart(plan_ctx, {
    type: 'bar',
    data: {
      labels: plan_keys,
      datasets: [{
        label: 'Planning Strategies Breakdown',
        backgroundColor: '#FC6584',
        borderColor: '#FC6584',
        data: plan_vals
      }]
    },
    options: {
      responsive: true,
      scales: {
        yAxes: [{
            ticks: {
                beginAtZero: true
            }
        }]
      }
    }
  });

  var doc_keys = Object.keys(strategies[1]);
  var doc_vals = Object.values(strategies[1]);
  var doc_ctx = document.getElementById('docChart').getContext('2d');
  var doc_chart = new Chart(doc_ctx, {
    type: 'bar',
    data: {
      labels: doc_keys,
      datasets: [{
        label: 'Documenting Progress Strategies Breakdown',
        backgroundColor: "#FD9F48",
        borderColor: "#FD9F48",
        data: doc_vals
      }]
    },
    options: {
      responsive: true,
      scales: {
        yAxes: [{
            ticks: {
                beginAtZero: true
            }
        }]
      }
    }
  });

  var comm_keys = Object.keys(strategies[2]);
  var comm_vals = Object.values(strategies[2]);
  var comm_ctx = document.getElementById('commChart').getContext('2d');
  var doc_chart = new Chart(comm_ctx, {
    type: 'bar',
    data: {
      labels: comm_keys,
      datasets: [{
        label: 'Communication Strategies Breakdown',
        backgroundColor: "#FFCC61",
        borderColor: "#FFCC61",
        data: comm_vals
      }]
    },
    options: {
      responsive: true,
      scales: {
        yAxes: [{
            ticks: {
                beginAtZero: true
            }
        }]
      }
    }
  });

  var help_keys = Object.keys(strategies[3]);
  var help_vals = Object.values(strategies[3]);
  help_keys[2] = "make efficient use of others' time"
  var help_ctx = document.getElementById('helpChart').getContext('2d');
  var help_chart = new Chart(help_ctx, {
    type: 'bar',
    data: {
      labels: help_keys,
      datasets: [{
        label: 'Help Seeking Strategies',
        backgroundColor: "#52C0BF",
        borderColor: "#52C0BF",
        data: help_vals
      }]
    },
    options: {
      responsive: true,
      scales: {
        yAxes: [{
            ticks: {
                beginAtZero: true
            }
        }]
      }
    }
  })

  var growth_keys = Object.keys(strategies[4]);
  var growth_vals = Object.values(strategies[4]);
  var growth_ctx = document.getElementById('growthChart').getContext('2d');
  var growth_chart = new Chart(growth_ctx, {
    type: 'bar',
    data: {
      labels: growth_keys,
      datasets: [{
        label: 'Grit & Growth Strategies',
        backgroundColor: "#3BA4E8",
        borderColor: "#3BA4E8",
        data: growth_vals
      }]
    },
    options: {
      responsive: true,
      scales: {
        yAxes: [{
            ticks: {
                beginAtZero: true
            }
        }]
      }
    }
  })


</script>
